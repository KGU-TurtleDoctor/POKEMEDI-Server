name: pokemedi main server CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  #S3
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }},
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Generate application.properties
      run: 
        cat <<EOF > src/main/resources/application.properties
        spring.security.oauth2.client.registration.kakao.client-name=${CLIENT_NAME}
        spring.security.oauth2.client.registration.kakao.client-id=${CLIENT_ID}
        spring.security.oauth2.client.registration.kakao.client-secret=${CLIENT_SECRET}
        spring.security.oauth2.client.registration.kakao.redirect-uri=${REDIRECT_URI}
        spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
        spring.security.oauth2.client.registration.kakao.scope=${SCOPE}
        spring.security.oauth2.client.registration.kakao.client-authentication-method=${CLIENT_AUTHENTICATION_METHOD}
        spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
        spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
        spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
        spring.security.oauth2.client.provider.kakao.user-name-attribute=${USER_NAME_ATTRIBUTE}
        spring.datasource.driver-class-name=${DRIVER_CLASS_NAME}
        spring.datasource.url=${DATASOURCE_URL}
        spring.datasource.username=${DATASOURCE_USERNAME}
        spring.datasource.password=${DATASOURCE_PASSWORD}
        spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
        spring.jpa.hibernate.ddl-auto=none
        spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
        spring.jwt.secret=${JWT_SECRET}
        redirectURL=${REDIRECT_URI}
        corsURL=${CORSURL}
        openai.api_key=${OPENAI_API_KEY}
        openai.model=${OPENAI_MODEL}
        openai.url=${OPENAI_URL}
        EOF
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew clean build
      
      # 디렉토리 생성
    - name: Make Directory
      run: mkdir -p deploy

      # deploy.sh 파일 복사
    - name: Copy deploy.sh
      run: cp ./scripts/deploy.sh ./deploy/deploy.sh

      # appspec.yml 파일 복사
    - name: Copy appspec.yml
      run: cp ./appspec.yml ./deploy/appspec.yml 
        
    # Jar 파일 복사
    - name: Copy Jar
      run: cp ./build/libs/*.jar ./deploy
    - name: Make zip file
      run: zip -r ./pokemedi_jar.zip ./deploy  
      shell: bash
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./pokemedi_jar.zip s3://${{ secrets.S3_BUCKET_NAME }}/deploy/pokemedi_jar.zip

# Deploy
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: 
        aws deploy create-deployment 
        --application-name pokemedi
        --deployment-group-name pokemedi-group
        --file-exists-behavior OVERWRITE 
        --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=deploy/pokemedi_jar.zip
        --region ap-northeast-2
      
